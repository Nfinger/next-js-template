import Head from "next/head";
import Link from "next/link";
import { useLogin, useLogout } from "../services/auth";
import type { Config } from "../modules/_types";
import { PAGE_TYPE } from "../modules/_types";
import { mapConfigToTemplate } from "../modules/_utils/layoutFactory";
import { withSessionSsr } from "../modules/_utils/withSession";
import { fetchExampleObjects } from "../backends/example";
import { useExample } from "../services/example";

interface Props {
  config: Config;
  exampleObjects: { objects: { id: number; name: string }[] };
  user: any;
}

export default function Home({ config, exampleObjects, user }: Props) {
  const login = useLogin();
  const logout = useLogout();

  const { data, isLoading, refetch } = useExample({
    initialData: exampleObjects,
  });
  return (
    <>
      <Head>
        {/* <title>{content}</title> */}
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-color-primary flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex flex-col items-center justify-center">
          {user ? (
            <div className="flex flex-row">
              <h1 className="pr-4 text-4xl text-white">Welcome {user.name}</h1>
              <button
                className="rounded-md bg-white p-2 text-black"
                onClick={() => logout()}
              >
                Logout
              </button>
            </div>
          ) : (
            <button
              className="rounded bg-[#2e026d] py-2 px-4 font-bold text-white"
              onClick={() =>
                login({ email: "test@test.com", password: "test123" })
              }
            >
              Login
            </button>
          )}
        </div>
        <div className="flex flex-col items-center justify-center pt-2">
          <p className="text-white">data: {JSON.stringify(data)}</p>
          <p className="text-white">isLoading: {JSON.stringify(isLoading)}</p>
          <button
            className="rounded bg-[#2e026d] py-2 px-4 font-bold text-white"
            onClick={() => refetch({})}
          >
            Refetch
          </button>
        </div>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {mapConfigToTemplate(config, PAGE_TYPE.HOME)}
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = withSessionSsr(
  async function getServerSideProps({ req }) {
    const user = req.session.user ?? null;

    const exampleObjects = await fetchExampleObjects();

    return {
      props: {
        user,
        exampleObjects,
      },
    };
  }
);
