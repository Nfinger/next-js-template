import Head from "next/head";
import Link from "next/link";
import { useLogin, useLogout, useUser } from "../services/auth";
import type { Config } from "../modules/_types";
import { PAGE_TYPE } from "../modules/_types";
import { mapConfigToTemplate } from "../modules/_utils/layoutFactory";
import { fetchExampleObjects } from "../backends/example";
import { useExample } from "../services/example";
import { NextApiRequest } from "next";

interface Props {
  config: Config;
  exampleObject: { objects: { id: number; name: string } };
}

export default function Home({ config, exampleObject }: Props) {
  const { data } = useUser();
  const login = useLogin();
  const logout = useLogout();
  const user = data?.user;

  return (
    <>
      <Head>
        {/* <title>{content}</title> */}
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-color-primary flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex flex-col items-center justify-center">
          {user ? (
            <div className="flex flex-row">
              <h1 className="pr-4 text-4xl text-white">Welcome {user.name}</h1>
              <button
                className="rounded-md bg-white p-2 text-black"
                onClick={() => logout()}
              >
                Logout
              </button>
            </div>
          ) : (
            <button
              className="rounded bg-[#2e026d] py-2 px-4 font-bold text-white"
              onClick={() =>
                login({ email: "test@test.com", password: "test123" })
              }
            >
              Login
            </button>
          )}
        </div>
        <div className="flex flex-col items-center justify-center pt-2">
          <p className="text-white">data: {JSON.stringify(exampleObject)}</p>
        </div>
      </main>
    </>
  );
}

export async function getStaticProps({
  params,
}: {
  params: { property: string };
}) {
  const exampleObjects = await fetchExampleObjects();

  return {
    props: {
      exampleObject: exampleObjects.objects.find(
        (obj: { id: number }) => obj.id === parseInt(params.property)
      ),
    },
    revalidate: 10,
  };
}

export async function getStaticPaths() {
  const exampleObjects = await fetchExampleObjects();

  // (slower builds, but faster initial page load)
  const paths = exampleObjects.objects.map(
    (obj: { id: number; name: string }) => ({
      params: { property: obj.id.toString() },
    })
  );
  return {
    paths,
    fallback: "blocking",
  };
}
